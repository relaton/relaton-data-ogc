---
schema-version: v1.2.7
id: 21-069r2
title:
- content: OGC CoverageJSON Community Standard
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: title-main
- content: OGC CoverageJSON Community Standard
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: main
link:
- content: https://docs.ogc.org/cs/21-069r2/21-069r2.html
  type: obp
type: standard
docid:
- id: 21-069r2
  type: OGC
  primary: true
date:
- type: published
  value: '2023-08-22'
contributor:
- person:
    name:
      completename:
        content: Chris Little
  role:
  - type: author
- person:
    name:
      completename:
        content: Jon Blower
  role:
  - type: author
- person:
    name:
      completename:
        content: 'Maik Riechert '
  role:
  - type: author
- organization:
    name:
    - content: Open Geospatial Consortium
  role:
  - type: publisher
edition:
  content: '2'
revdate: '2023-08-22'
language:
- en
script:
- Latn
abstract:
- content: "Based on JavaScript Object Notation (JSON), CoverageJSON is a format for
    publishing spatiotemporal data to the Web. The primary design goals are simplicity,
    machine and human readability and efficiency. While other use cases are possible,
    the primary CoverageJSON use case is enabling the development of interactive visual
    websites that display and manipulate environmental data within a web browser.\r\n\r\nImplementation
    experience has shown that CoverageJSON is an effective, efficient format, friendly
    to web and application developers, and therefore consistent with the current OGC
    API developments. CoverageJSON supports the efficient transfer from big data stores
    of useful quantities of data to lightweight clients, such as browsers and mobile
    applications. This enables straightfoward local manipulation of the data, for
    example, by science researchers. Web developers often use and are familiar with
    JSON formats.\r\n\r\nCoverageJSON can be used to encode coverages and collections
    of coverages. Coverage data may be gridded or non-gridded, and data values may
    represent continuous values (such as temperature) or discrete categories (such
    as land cover classes). CoverageJSON uses JSON-LD to provide interoperability
    with RDF and Semantic Web applications and to reduce the potential size of the
    payload.\r\n\r\nRelatively large datasets can be handled efficiently in a “web-friendly”
    way by partitioning information among several CoverageJSON documents, including
    a tiling mechanism. Nevertheless, CoverageJSON is not intended to be a replacement
    for efficient binary formats such as NetCDF, HDF or GRIB, and is not intended
    primarily to store or transfer very large datasets in bulk.\r\n\r\nThe simplest
    and most common use case is to embed all the data values of all variables in a
    Coverage object within the CoverageJSON document, so that it is “self-contained”.
    Such a standalone document supports the use of very simple clients.\r\n\r\nThe
    next simplest use case is to put data values for each variable (parameter) in
    separate array objects in separate CoverageJSON documents which are linked from
    the Coverage object. This is useful for a multi-variable dataset, such as one
    with temperature, humidity, wind speed, etc., to be recorded in separate files.
    This allows the client to load only the variables of interest.\r\n\r\nA sophisticated
    use case is to use tiling objects, where the data values are partitioned spatially
    and temporally, so that a single variable’s data values would be split among several
    documents. A simple example of this use case is encoding each time step of a dataset
    into a separate file, but the tiles could also be divided spatially in a manner
    similar to a tiled map server."
  language:
  - en
  script:
  - Latn
  format: text/plain
doctype:
  type: community-standard
editorialgroup:
  committee: technical
ext:
  schema-version: v1.0.1
